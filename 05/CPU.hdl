// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a = instruction,b = aluout, sel=instruction[15], out=ain);
    Not(in=instruction[15], out=aCmd);
    Or(a=aCmd, b=instruction[5], out=aLoad);

    ARegister(in=ain, load=aLoad, out=a, out[0..14]=addressM);

    Mux16(a=a, b=inM, sel=instruction[12], out=am);

    And(a=instruction[15],b=instruction[4],out=dload);
    DRegister(in=aluout, load=dload, out=dout);

    ALU(x=dout , y=am,  // 16-bit inputs        
        zx=instruction[11], // zero the x input?
        nx=instruction[10], // negate the x input?
        zy=instruction[9], // zero the y input?
        ny=instruction[8], // negate the y input?
        f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
        no=instruction[6], // negate the out output?)
        out=aluout, // 16-bit output
        out=outM,
        zr=zout, // 1 if (out == 0), 0 otherwise
        ng=nout); // 1 if (out < 0),  0 otherwise

    // dest領域の仕様 P72 図4-4参照
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    // jump領域の仕様 P73 図4-5参照
    And(a=nout, b=instruction[2], out=j1);
    And(a=zout, b=instruction[1], out=j2);
    Or(a=nout, b=zout, out=notplus);
    Not(in=notplus, out=plus);
    And(a=plus, b=instruction[0], out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);
    And(a=j123, b=instruction[15], out=pcLoad);
    Not(in=pcLoad, out=pcInc);
    PC(in=a, inc=pcInc, load=pcLoad, reset=reset, out[0..14]=pc);

}